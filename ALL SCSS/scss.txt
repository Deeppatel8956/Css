npm init

node i sass --save --dev

create html file

create css file


interview question
Here are some SASS interview questions and answers in Hindi that could help you prepare for interviews in 2024:

### 1. **SASS क्या है? इसे क्यों उपयोग करते हैं?**
   **उत्तर:**  
   SASS (Syntactically Awesome Style Sheets) एक CSS प्रीप्रोसेसर है, जो CSS के विकास को सरल और अधिक कुशल बनाता है। SASS में हम वेरिएबल्स, नेस्टिंग, मिक्सिन्स और पार्टियल्स जैसी सुविधाओं का उपयोग कर सकते हैं, जिससे CSS कोड को पुन: प्रयोज्य, पठनीय और संगठित किया जा सकता है।

### 2. **SASS और SCSS में क्या अंतर है?**
   **उत्तर:**  
   SASS और SCSS दोनों SASS के सिंटेक्स हैं।  
   - **SASS:** इसका मूल सिंटेक्स है और यह बिना ब्रैकेट्स और सेमीकोलन्स के उपयोग किया जाता है। यह पायथन जैसी भाषा के समान है।
   - **SCSS:** यह SASS का आधुनिक संस्करण है, जो CSS के समान दिखता है और इसमें ब्रैकेट्स और सेमीकोलन्स का उपयोग होता है। यह CSS के साथ पूरी तरह से संगत है।

### 3. **SASS में मिक्सिन्स (Mixins) क्या हैं? इसका उपयोग कैसे करते हैं?**
   **उत्तर:**  
   मिक्सिन्स SASS में पुन: प्रयोज्य कोड ब्लॉक होते हैं, जिनका उपयोग आप अपनी स्टाइलशीट में कई स्थानों पर कर सकते हैं। मिक्सिन्स का उपयोग कोड को पुन: लिखने की आवश्यकता को कम करता है।

   **उदाहरण:**  
   ```scss
   @mixin border-radius($radius) {
       -webkit-border-radius: $radius;
       -moz-border-radius: $radius;
       -ms-border-radius: $radius;
       -o-border-radius: $radius;
       border-radius: $radius;
   }

   .box {
       @include border-radius(10px);
   }
   ```

### 4. **SASS में वेरिएबल्स क्या होते हैं? इसका उपयोग क्यों करते हैं?**
   **उत्तर:**  
   वेरिएबल्स का उपयोग मानों को स्टोर करने के लिए किया जाता है, जिन्हें आप कई स्थानों पर उपयोग कर सकते हैं। इससे कोड में बदलाव करना आसान हो जाता है, जैसे कि किसी रंग को बदलना।

   **उदाहरण:**  
   ```scss
   $primary-color: #3498db;

   body {
       background-color: $primary-color;
   }
   ```

### 5. **SASS में नेस्टिंग (Nesting) क्या है?**
   **उत्तर:**  
   नेस्टिंग SASS में एक सुविधाजनक फीचर है, जिससे आप CSS सेलेक्टर्स को अन्य सेलेक्टर्स के भीतर नेस्ट कर सकते हैं। इससे कोड अधिक पठनीय और संरचित बनता है।

   **उदाहरण:**  
   ```scss
   .nav {
       ul {
           margin: 0;
           padding: 0;
           list-style: none;
       }

       li {
           display: inline-block;
       }

       a {
           text-decoration: none;
       }
   }
   ```

### 6. **SASS में @import और @use के बीच अंतर क्या है?**
   **उत्तर:**  
   - **@import:** यह पुराने तरीके से SASS फाइल्स को इम्पोर्ट करने के लिए उपयोग किया जाता है। लेकिन यह कई फाइलों को एक से अधिक बार इम्पोर्ट कर सकता है, जिससे डुप्लीकेट CSS जनरेट हो सकती है।
   - **@use:** यह SASS के नए वर्जन में इम्पोर्ट के लिए प्रयोग किया जाता है। यह मॉड्यूल के रूप में फाइलों को लोड करता है और डुप्लीकेट इम्पोर्ट्स से बचाता है। इसके अलावा, आप केवल आवश्यक कोड को `@use` के साथ एक्सेस कर सकते हैं।

### 7. **SASS में Placeholder Selectors क्या हैं?**
   **उत्तर:**  
   Placeholder Selectors का उपयोग ऐसे सेलेक्टर्स को परिभाषित करने के लिए किया जाता है जिन्हें सीधे HTML में नहीं लागू किया जा सकता। Placeholder Selectors `%` से शुरू होते हैं और इन्हें `@extend` के साथ उपयोग किया जाता है।

   **उदाहरण:**  
   ```scss
   %button-style {
       padding: 10px 20px;
       border-radius: 5px;
       background-color: $primary-color;
   }

   .submit-button {
       @extend %button-style;
       color: white;
   }
   ```

### 8. **SASS में @extend और @include के बीच क्या अंतर है?**
   **उत्तर:**  
   - **@extend:** यह SASS में एक अन्य सेलेक्टर की स्टाइल को किसी नए सेलेक्टर में लागू करने के लिए उपयोग किया जाता है।
   - **@include:** यह मिक्सिन्स को इम्पोर्ट करने के लिए उपयोग किया जाता है, जो एक पुन: प्रयोज्य कोड ब्लॉक है। इससे आप उन स्टाइल्स को बिना डुप्लिकेट किए कई जगहों पर उपयोग कर सकते हैं।

### 9. **SASS में Partials क्या होते हैं और कैसे काम करते हैं?**
   **उत्तर:**  
   Partials वे SASS फाइल्स होती हैं जिनका नाम `_` से शुरू होता है और इन्हें `@import` या `@use` के साथ इम्पोर्ट किया जाता है। ये सीधे CSS में कंपाइल नहीं होतीं, बल्कि उन्हें अन्य SASS फाइल्स में इम्पोर्ट किया जाता है।

   **उदाहरण:**  
   अगर आपके पास `_variables.scss` नाम की फाइल है, तो आप उसे `@import 'variables';` का उपयोग करके इम्पोर्ट कर सकते हैं।

### 10. **SASS में @mixin के साथ आर्गुमेंट्स का उपयोग कैसे करते हैं?**
   **उत्तर:**  
   आप मिक्सिन्स में आर्गुमेंट्स का उपयोग कर सकते हैं ताकि उन्हें अधिक लचीला और पुन: प्रयोज्य बनाया जा सके। आप डिफॉल्ट वैल्यूज भी सेट कर सकते हैं।

   **उदाहरण:**  
   ```scss
   @mixin button($color: #3498db, $padding: 10px) {
       background-color: $color;
       padding: $padding;
       border: none;
       color: white;
   }

   .primary-button {
       @include button;
   }

   .secondary-button {
       @include button(#2ecc71, 15px);
   }
   ```

ये कुछ महत्वपूर्ण सवाल और उनके जवाब हैं जो 2024 में SASS के इंटरव्यू के दौरान पूछे जा सकते हैं। इनका अभ्यास करें ताकि आप इंटरव्यू में बेहतर प्रदर्शन कर सकें।

### 11. **SASS में @function का उपयोग कैसे किया जाता है?**
   **उत्तर:**  
   SASS में `@function` का उपयोग करके आप कस्टम फंक्शन बना सकते हैं, जो एक वैल्यू को रिटर्न करता है। आप इन फंक्शंस का उपयोग गणनाएं करने और स्टाइल्स में डायनामिक वैल्यूज प्रदान करने के लिए कर सकते हैं।

   **उदाहरण:**  
   ```scss
   @function calculate-margin($base, $factor) {
       @return $base * $factor;
   }

   .content {
       margin-top: calculate-margin(10px, 2);
   }
   ```

   इस उदाहरण में `calculate-margin` फंक्शन बेस और फैक्टर के आधार पर मार्जिन की गणना करता है और इसे `.content` क्लास में लागू करता है।

### 12. **SASS में लूप्स (Loops) का उपयोग कैसे किया जाता है?**
   **उत्तर:**  
   SASS में लूप्स का उपयोग स्टाइल्स को पुन: उपयोग करने और कोड को अधिक कुशल बनाने के लिए किया जाता है। SASS में `@for`, `@each`, और `@while` लूप्स उपलब्ध हैं।

   **उदाहरण (For Loop):**  
   ```scss
   @for $i from 1 through 5 {
       .col-#{$i} {
           width: 20% * $i;
       }
   }
   ```

   इस कोड में `@for` लूप का उपयोग करके `.col-1`, `.col-2`, आदि क्लासेस बनाई जाती हैं, जिनकी चौड़ाई 20% गुणा $i होती है।

### 13. **SASS में @media डायरेक्टिव का उपयोग कैसे करते हैं?**
   **उत्तर:**  
   SASS में `@media` डायरेक्टिव का उपयोग मीडिया क्वेरीज को लिखने के लिए किया जाता है। SASS आपको मीडिया क्वेरीज को नेस्ट करने की सुविधा देता है, जिससे कोड अधिक पठनीय बनता है।

   **उदाहरण:**  
   ```scss
   .container {
       width: 100%;

       @media screen and (min-width: 600px) {
           width: 80%;
       }
   }
   ```

   इस कोड में, `.container` का वाइड 100% है, लेकिन जब स्क्रीन की चौड़ाई 600px से अधिक हो जाती है, तो इसकी वाइड 80% हो जाती है।

### 14. **SASS में नेस्टेड मीडिया क्वेरीज का उपयोग कैसे किया जाता है?**
   **उत्तर:**  
   SASS में आप नेस्टेड मीडिया क्वेरीज का उपयोग कर सकते हैं, जिससे आप किसी भी सेलेक्टर के भीतर मीडिया क्वेरीज लिख सकते हैं। यह कोड को अधिक संरचित और पठनीय बनाता है।

   **उदाहरण:**  
   ```scss
   .box {
       padding: 20px;

       @media (max-width: 600px) {
           padding: 10px;
       }
   }
   ```

   इस कोड में, `.box` के लिए पैडिंग 20px है, लेकिन जब स्क्रीन की चौड़ाई 600px से कम हो जाती है, तो पैडिंग 10px हो जाती है।

### 15. **SASS में inheritance और extend के बीच क्या अंतर है?**
   **उत्तर:**  
   - **Inheritance:** CSS में Inheritance का मतलब होता है कि एक एलिमेंट अपने पैरेंट एलिमेंट की स्टाइल्स को विरासत में प्राप्त करता है। 
   - **Extend:** SASS में `@extend` का उपयोग करके आप एक सेलेक्टर की स्टाइल्स को दूसरे सेलेक्टर में कॉपी कर सकते हैं। यह एक सेलेक्टर को दूसरे सेलेक्टर के समान बनाता है, और यह कोड डुप्लीकेशन को कम करता है।

   **उदाहरण:**  
   ```scss
   .button {
       padding: 10px;
       background-color: blue;
   }

   .primary-button {
       @extend .button;
       color: white;
   }
   ```

   यहाँ `.primary-button` को `.button` की सभी स्टाइल्स मिल जाती हैं, और इसे अतिरिक्त रूप से `color: white;` भी मिलती है।

### 16. **SASS में नेस्टेड प्रॉपर्टीज (Nested Properties) क्या हैं?**
   **उत्तर:**  
   SASS में नेस्टेड प्रॉपर्टीज का उपयोग करके आप CSS प्रॉपर्टीज को नेस्ट कर सकते हैं। यह उन प्रॉपर्टीज के लिए उपयोगी होता है, जिनके एक से अधिक उप-प्रॉपर्टीज होती हैं, जैसे `border`, `font`, आदि।

   **उदाहरण:**  
   ```scss
   .box {
       font: {
           size: 16px;
           weight: bold;
           family: Arial, sans-serif;
       };

       border: {
           width: 1px;
           style: solid;
           color: #000;
       };
   }
   ```

   इस कोड में `font` और `border` प्रॉपर्टीज को नेस्ट किया गया है, जिससे कोड अधिक संगठित और पठनीय बनता है।

### 17. **SASS में Partials का उपयोग कैसे करते हैं?**
   **उत्तर:**  
   Partials का उपयोग SASS फाइल्स को छोटे-छोटे हिस्सों में विभाजित करने के लिए किया जाता है। Partial फाइल्स का नाम `_` (अंडरस्कोर) से शुरू होता है। इन्हें सीधे CSS में नहीं, बल्कि अन्य SASS फाइल्स में इम्पोर्ट किया जाता है।

   **उदाहरण:**  
   यदि आपके पास `_header.scss` नाम की एक फाइल है, तो आप इसे किसी भी SASS फाइल में इस प्रकार इम्पोर्ट कर सकते हैं:

   ```scss
   @import 'header';
   ```

   इससे `_header.scss` की सभी स्टाइल्स उस फाइल में इम्पोर्ट हो जाएंगी।

### 18. **SASS में Variables में Default वैल्यू कैसे सेट करते हैं?**
   **उत्तर:**  
   SASS में आप वेरिएबल्स की डिफ़ॉल्ट वैल्यू सेट कर सकते हैं ताकि अगर कोई वैल्यू पहले से परिभाषित न हो, तो डिफ़ॉल्ट वैल्यू का उपयोग हो सके। इसके लिए आप `!default` फ्लैग का उपयोग करते हैं।

   **उदाहरण:**  
   ```scss
   $primary-color: blue !default;

   body {		
       background-color: $primary-color;
   }
   ```

   अगर `$primary-color` पहले से सेट नहीं है, तो यह वैल्यू ब्लू हो जाएगी।

### 19. **SASS Maps क्या हैं और उनका उपयोग कैसे करते हैं?**
   **उत्तर:**  
   SASS Maps की सहायता से आप की-वैल्यू जोड़ी का उपयोग कर सकते हैं, जिससे आप कॉम्प्लेक्स डेटा स्ट्रक्चर को हैंडल कर सकते हैं। यह CSS में डायनामिक स्टाइलिंग के लिए उपयोगी है।

   **उदाहरण:**  
   ```scss
   $theme-colors: (
       primary: #3498db,
       secondary: #2ecc71,
       danger: #e74c3c
   );

   .button {
       background-color: map-get($theme-colors, primary);
   }
   ```

   इस कोड में, `$theme-colors` मैप से `primary` कलर का उपयोग `.button` में किया गया है।

### 20. **SASS में @content डायरेक्टिव क्या है?**
   **उत्तर:**  
   `@content` डायरेक्टिव का उपयोग मिक्सिन्स के अंदर किया जाता है, ताकि आप मिक्सिन्स को अधिक फ्लेक्सिबल बना सकें। यह आपको मिक्सिन को कॉल करते समय कस्टम कंटेंट पास करने की अनुमति देता है।

   **उदाहरण:**  
   ```scss
   @mixin button {
       padding: 10px;
       background-color: $primary-color;
       @content;
   }

   .primary-button {
       @include button {
           color: white;
           border: none;
       };
   }
   ```

   इस उदाहरण में, `@content` मिक्सिन के अंदर कस्टम स्टाइल्स को इनजेक्ट करता है, जिससे `button` मिक्सिन और अधिक फ्लेक्सिबल हो जाता है।

यहां दिए गए प्रश्न और उत्तर SASS की गहरी समझ के लिए डिज़ाइन किए गए हैं और ये इंटरव्यू के दौरान आपके कौशल को प्रदर्शित करने में मदद करेंगे।


### 21. **SASS में Placeholder Selectors क्या हैं और इनका उपयोग कैसे किया जाता है?**
   **उत्तर:**  
   Placeholder Selectors, जिन्हें SASS में `%` के साथ लिखा जाता है, ऐसे सेलेक्टर्स होते हैं जिन्हें सीधे CSS में आउटपुट नहीं किया जाता है। इनका उपयोग `@extend` के साथ किया जाता है, ताकि अन्य सेलेक्टर्स इनकी स्टाइल्स को विरासत में ले सकें।

   **उदाहरण:**  
   ```scss
   %button-styles {
       padding: 10px 20px;
       border-radius: 5px;
   }

   .primary-button {
       @extend %button-styles;
       background-color: blue;
       color: white;
   }

   .secondary-button {
       @extend %button-styles;
       background-color: grey;
       color: black;
   }
   ```

   इस कोड में, `%button-styles` प्लेसहोल्डर को `primary-button` और `secondary-button` सेलेक्टर्स में एक्सटेंड किया गया है, जिससे कोड का पुन: उपयोग संभव हो गया है।

### 22. **SASS में Mixins और Functions के बीच क्या अंतर है?**
   **उत्तर:**  
   - **Mixins:** मिक्सिन्स का उपयोग स्टाइल्स के समूह को पुन: उपयोग करने के लिए किया जाता है। मिक्सिन्स को आप पैरामीटर्स के साथ या बिना पैरामीटर्स के डिफाइन कर सकते हैं और इन्हें `@include` के साथ कॉल कर सकते हैं। मिक्सिन्स मल्टिपल CSS प्रॉपर्टीज को हैंडल कर सकते हैं।
     
   - **Functions:** फंक्शंस भी पैरामीटर्स लेते हैं और एक वैल्यू को रिटर्न करते हैं। फंक्शंस का उपयोग गणनाएं करने के लिए किया जाता है और इन्हें सीधी वैल्यू के रूप में उपयोग किया जाता है। एक फंक्शन एक ही वैल्यू को रिटर्न करता है।

   **उदाहरण:**  
   ```scss
   // Mixin
   @mixin box-shadow($x, $y, $blur, $color) {
       box-shadow: $x $y $blur $color;
   }

   .box {
       @include box-shadow(1px, 2px, 5px, #333);
   }

   // Function
   @function double($n) {
       @return $n * 2;
   }

   .container {
       width: double(10px);
   }
   ```

   इस कोड में मिक्सिन `box-shadow` को `box` क्लास में उपयोग किया गया है, और फंक्शन `double` को `container` क्लास में उपयोग किया गया है।

### 23. **SASS में @warn और @debug डायरेक्टिव का उपयोग क्या होता है?**
   **उत्तर:**  
   - **@warn:** `@warn` डायरेक्टिव का उपयोग कंसोल में चेतावनी संदेश देने के लिए किया जाता है। यह आपको संभावित समस्याओं की जानकारी देता है।
   - **@debug:** `@debug` का उपयोग किसी वैल्यू या वेरिएबल को कंसोल में आउटपुट करने के लिए किया जाता है, जिससे आप कोड को डीबग कर सकते हैं।

   **उदाहरण:**  
   ```scss
   $primary-color: #3498db;
   
   @if (lightness($primary-color) > 50%) {
       @warn "Primary color is quite light!";
   } else {
       @debug "Primary color lightness is: #{lightness($primary-color)}%";
   }
   ```

   इस कोड में, यदि `$primary-color` की लाइटनेस 50% से अधिक है, तो `@warn` एक चेतावनी प्रदर्शित करता है, अन्यथा `@debug` लाइटनेस को कंसोल में दिखाता है।

### 24. **SASS में Parent Selector (`&`) का उपयोग कैसे किया जाता है?**
   **उत्तर:**  
   Parent Selector `&` का उपयोग उस वर्तमान सेलेक्टर को संदर्भित करने के लिए किया जाता है जिसमें यह नेस्टेड होता है। यह विशेष रूप से नेस्टेड स्टाइलिंग और मीडियाक्वेरीज़ में उपयोगी होता है।

   **उदाहरण:**  
   ```scss
   .button {
       color: white;
       background-color: blue;

       &:hover {
           background-color: darkblue;
       }

       &.active {
           background-color: green;
       }
   }
   ```

   इस कोड में, `&:hover` का उपयोग `button` सेलेक्टर के होवर स्टेट के लिए किया गया है, और `&.active` का उपयोग `button` के `active` स्टेट के लिए किया गया है।

### 25. **SASS में Color Functions क्या हैं और उनका उपयोग कैसे किया जाता है?**
   **उत्तर:**  
   SASS में Color Functions का उपयोग रंगों के साथ गणनाएं करने के लिए किया जाता है। ये फंक्शंस आपको रंगों को हल्का, गहरा करने, ट्रांसपेरेंसी जोड़ने, और अन्य रंग संबंधी परिवर्तन करने की अनुमति देते हैं।

   **उदाहरण:**  
   ```scss
   $primary-color: #3498db;

   .button {
       background-color: lighten($primary-color, 20%);
       border-color: darken($primary-color, 20%);
       color: rgba($primary-color, 0.8);
   }
   ```

   इस कोड में, `lighten` का उपयोग करके बटन का बैकग्राउंड कलर हल्का किया गया है, `darken` का उपयोग करके बटन की बॉर्डर का कलर गहरा किया गया है, और `rgba` का उपयोग करके बटन के टेक्स्ट में ट्रांसपेरेंसी जोड़ी गई है।

### 26. **SASS में Responsive Design के लिए कौन-कौन सी Techniques उपलब्ध हैं?**
   **उत्तर:**  
   SASS में Responsive Design को बेहतर बनाने के लिए कई टेक्निक्स उपलब्ध हैं:
   - **Media Queries:** @media का उपयोग करके डिवाइस के आकार के आधार पर CSS लागू करें।
   - **Mixins:** विभिन्न डिवाइस साइज के लिए स्टाइल्स को मिक्सिन्स में संकलित करें।
   - **Breakpoints:** सामान्य ब्रेकप्वाइंट्स के लिए वेरिएबल्स सेट करें और इन्हें मिक्सिन्स में उपयोग करें।
   - **Fluid Typography:** फोंट साइज और अन्य डाइमेंशन्स को व्यूपोर्ट के आधार पर गणना करें।

   **उदाहरण:**  
   ```scss
   $small: 600px;
   $medium: 900px;

   @mixin responsive($breakpoint) {
       @if $breakpoint == small {
           @media (max-width: $small) { @content; }
       }
       @else if $breakpoint == medium {
           @media (max-width: $medium) { @content; }
       }
   }

   .container {
       width: 100%;
       @include responsive(small) {
           width: 80%;
       }
       @include responsive(medium) {
           width: 60%;
       }
   }
   ```

   इस उदाहरण में, मिक्सिन `responsive` का उपयोग विभिन्न डिवाइस साइज के लिए `container` की वाइड को सेट करने के लिए किया गया है।

### 27. **SASS में Modular CSS कैसे बनाया जा सकता है?**
   **उत्तर:**  
   SASS में Modular CSS बनाने के लिए आप CSS को विभिन्न भागों में विभाजित कर सकते हैं और इन्हें एक मुख्य फाइल में इम्पोर्ट कर सकते हैं। यह आपके CSS को संरचित और पुन: उपयोग योग्य बनाता है।

   **उदाहरण:**  
   ```scss
   // _variables.scss
   $primary-color: #3498db;

   // _header.scss
   .header {
       background-color: $primary-color;
       padding: 20px;
   }

   // main.scss
   @import 'variables';
   @import 'header';
   ```

   इस उदाहरण में, `variables` और `header` फाइल्स को `main.scss` में इम्पोर्ट किया गया है, जिससे CSS को मॉड्यूलर तरीके से व्यवस्थित किया गया है।

### 28. **SASS में Conditionals (शर्तें) कैसे काम करते हैं?**
   **उत्तर:**  
   SASS में `@if`, `@else if`, और `@else` का उपयोग करके कंडीशनल स्टेटमेंट्स बनाए जा सकते हैं। यह आपको CSS को अधिक डायनामिक बनाने में मदद करता है, जहाँ स्टाइल्स किसी विशेष शर्त के आधार पर लागू होते हैं।

   **उदाहरण:**  
   ```scss
   $theme: dark;

   body {
       @if $theme == light {
           background-color: white;
           color: black;
       } @else if $theme == dark {
           background-color: black;
           color: white;
       } @else {
           background-color: gray;
           color: white;
       }
   }
   ```

   इस कोड में, बॉडी का बैकग्राउंड कलर और टेक्स्ट कलर `$theme` के वैल्यू के आधार पर सेट किया गया है।

### 29. **SASS में Math Operations क्या हैं और इन्हें कैसे उपयोग किया जाता है?**
   **उत्तर:**  
   SASS में आप विभिन्न गणितीय ऑपरेशन्स जैसे जोड़, घटाव, गुणा, और भाग का उपयोग CSS वैल्यूज के साथ कर सकते हैं।


### 30. **SASS में Math Operations क्या हैं और इन्हें कैसे उपयोग किया जाता है?**
   **उत्तर:**  
   SASS में आप विभिन्न गणितीय ऑपरेशन्स जैसे जोड़ (addition), घटाव (subtraction), गुणा (multiplication), और भाग (division) का उपयोग CSS वैल्यूज के साथ कर सकते हैं। यह ऑपरेशन्स CSS प्रॉपर्टीज को अधिक डायनामिक और फ्लेक्सिबल बनाने में सहायक होते हैं।

   **उदाहरण:**  
   ```scss
   $base-font-size: 16px;
   $padding: 10px;
   
   .container {
       width: 100% - $padding * 2;
       font-size: $base-font-size * 1.5;
       margin-top: $padding / 2;
   }
   ```

   इस उदाहरण में, गणितीय ऑपरेशन्स का उपयोग `container` क्लास के width, font-size, और margin-top को सेट करने के लिए किया गया है।

### 31. **SASS में Color Manipulation Functions क्या होते हैं?**
   **उत्तर:**  
   SASS में कई कलर मैनिपुलेशन फंक्शंस होते हैं जो आपको रंगों के साथ विविध परिवर्तन करने में सक्षम बनाते हैं। उदाहरण के लिए:
   - `lighten(color, amount)`: किसी रंग को हल्का बनाता है।
   - `darken(color, amount)`: किसी रंग को गहरा बनाता है।
   - `saturate(color, amount)`: किसी रंग की संतृप्ति (saturation) बढ़ाता है।
   - `desaturate(color, amount)`: किसी रंग की संतृप्ति घटाता है।
   - `transparentize(color, amount)`: किसी रंग में ट्रांसपेरेंसी जोड़ता है।
   - `adjust-hue(color, degrees)`: किसी रंग के ह्यू को समायोजित करता है।

   **उदाहरण:**  
   ```scss
   $primary-color: #3498db;

   .button {
       background-color: lighten($primary-color, 20%);
       border-color: darken($primary-color, 10%);
       color: adjust-hue($primary-color, -30deg);
   }
   ```

   इस कोड में, `lighten` और `darken` फंक्शंस का उपयोग बटन की बैकग्राउंड और बॉर्डर कलर को हल्का और गहरा करने के लिए किया गया है, जबकि `adjust-hue` का उपयोग टेक्स्ट के कलर का ह्यू बदलने के लिए किया गया है।

### 32. **SASS में Import का उपयोग कैसे किया जाता है और इसका लाभ क्या है?**
   **उत्तर:**  
   SASS में `@import` का उपयोग कई SCSS फाइल्स को एक साथ जोड़ने के लिए किया जाता है। यह CSS को मॉड्यूलर और संरचित बनाता है। एक बड़े प्रोजेक्ट में, आप विभिन्न SCSS फाइल्स में अलग-अलग स्टाइल्स को लिख सकते हैं और फिर उन्हें एक मुख्य फाइल में इम्पोर्ट कर सकते हैं।

   **उदाहरण:**  
   ```scss
   // _reset.scss
   * {
       margin: 0;
       padding: 0;
   }

   // _variables.scss
   $primary-color: #3498db;

   // main.scss
   @import 'reset';
   @import 'variables';

   body {
       background-color: $primary-color;
   }
   ```

   इस कोड में, `reset` और `variables` फाइल्स को `main.scss` में इम्पोर्ट किया गया है, जिससे सभी स्टाइल्स को एक फाइल में कॉम्पाइल किया जा सकता है।

### 33. **SASS में Output Style के कितने प्रकार होते हैं?**
   **उत्तर:**  
   SASS में Output Style कोड के आउटपुट को चार विभिन्न स्टाइल्स में जनरेट कर सकता है:
   - **nested:** यह आउटपुट स्टाइल नेस्टेड इंडेंटेशन के साथ होता है, जो कि पढ़ने में आसान होता है।
   - **expanded:** यह स्टाइल सामान्य मल्टी-लाइन CSS आउटपुट जनरेट करता है।
   - **compact:** यह स्टाइल कम लाइन स्पेसिंग के साथ CSS को कॉम्पैक्ट रूप में आउटपुट करता है।
   - **compressed:** यह स्टाइल सबसे छोटा आउटपुट जनरेट करता है, जिसमें कोई भी अनावश्यक व्हाइटस्पेस या नई लाइन नहीं होती।

   **उदाहरण:**  
   ```scss
   body {
       font-size: 16px;
       color: #333;
   }

   .container {
       margin: 0 auto;
       padding: 20px;
   }
   ```

   **Output Styles:**  
   - **nested:**
     ```css
     body {
       font-size: 16px;
       color: #333; }
     
     .container {
       margin: 0 auto;
       padding: 20px; }
     ```
   - **expanded:**
     ```css
     body {
       font-size: 16px;
       color: #333;
     }
     
     .container {
       margin: 0 auto;
       padding: 20px;
     }
     ```
   - **compact:**
     ```css
     body { font-size: 16px; color: #333; }
     .container { margin: 0 auto; padding: 20px; }
     ```
   - **compressed:**
     ```css
     body{font-size:16px;color:#333}.container{margin:0 auto;padding:20px}
     ```

### 34. **SASS में Partials क्या होते हैं और इनका उपयोग कैसे किया जाता है?**
   **उत्तर:**  
   SASS में Partials वे SCSS फाइल्स होती हैं जो एक प्रोजेक्ट में उपयोग किए जाने वाले छोटे कोड स्निपेट्स होते हैं। Partials फाइल्स का नाम आमतौर पर `_` (अंडरस्कोर) से शुरू होता है, और इन्हें `@import` के माध्यम से किसी अन्य SCSS फाइल में इम्पोर्ट किया जाता है। Partial फाइल्स को सामान्य CSS में आउटपुट नहीं किया जाता है।

   **उदाहरण:**  
   ```scss
   // _buttons.scss (Partial file)
   .button {
       padding: 10px 20px;
       background-color: $primary-color;
       border: none;
       border-radius: 5px;
   }

   // main.scss
   @import 'buttons';

   .header {
       font-size: 24px;
   }
   ```

   इस कोड में, `_buttons.scss` Partial फाइल को `main.scss` में इम्पोर्ट किया गया है। `_buttons.scss` फाइल केवल उसी समय CSS में आउटपुट होती है जब इसे किसी अन्य SCSS फाइल में इम्पोर्ट किया जाता है।

### 35. **SASS में Built-in Functions क्या होते हैं और उनके कुछ उदाहरण दें?**
   **उत्तर:**  
   SASS में Built-in Functions वे फ़ंक्शंस होते हैं जो आपको CSS को अधिक पावरफुल और डायनामिक बनाने में मदद करते हैं। ये फ़ंक्शंस विभिन्न प्रकार के ऑपरेशन्स करने के लिए उपयोग किए जाते हैं, जैसे रंग मैनिपुलेशन, गणितीय गणनाएँ, और स्ट्रिंग मैनिपुलेशन।

   **कुछ उदाहरण:**
   - **`lighten($color, $amount)`:** किसी रंग को हल्का बनाता है।
   - **`darken($color, $amount)`:** किसी रंग को गहरा बनाता है।
   - **`percentage($number)`:** किसी संख्या को प्रतिशत में बदलता है।
   - **`round($number)`:** किसी संख्या को निकटतम पूर्णांक में राउंड करता है।
   - **`str-length($string)`:** किसी स्ट्रिंग की लंबाई लौटाता है।

   **उदाहरण:**  
   ```scss
   $base-color: #3498db;
   $light-color: lighten($base-color, 20%);
   $rounded-value: round(3.6);
   
   .box {
       background-color: $light-color;
       width: percentage(0.5);
       border-radius: $rounded-value * 10px;
   }
   ```

   इस कोड में, `lighten` फ़ंक्शन का उपयोग `base-color` को हल्का करने के लिए किया गया है, `percentage` फ़ंक्शन का उपयोग `width` को प्रतिशत में बदलने के लिए किया गया है, और `round` फ़ंक्शन का उपयोग `border-radius` के लिए किया गया है।